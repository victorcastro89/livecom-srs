definitions:
  db.Live:
    properties:
      createdAt:
        $ref: '#/definitions/pgtype.Timestamptz'
      description:
        $ref: '#/definitions/pgtype.Text'
      endTime:
        $ref: '#/definitions/pgtype.Timestamp'
      liveAppName:
        $ref: '#/definitions/pgtype.Text'
      liveID:
        type: integer
      liveSecret:
        items:
          type: integer
        type: array
      scheduledEndTime:
        $ref: '#/definitions/pgtype.Timestamp'
      scheduledStartTime:
        $ref: '#/definitions/pgtype.Timestamp'
      startTime:
        $ref: '#/definitions/pgtype.Timestamp'
      streamBroadcastUrl:
        items:
          type: integer
        type: array
      streamName:
        $ref: '#/definitions/pgtype.Text'
      title:
        type: string
      updatedAt:
        $ref: '#/definitions/pgtype.Timestamptz'
      userID:
        type: string
    type: object
  db.User:
    properties:
      createdAt:
        $ref: '#/definitions/pgtype.Timestamptz'
      displayName:
        $ref: '#/definitions/pgtype.Text'
      email:
        type: string
      emailVerified:
        $ref: '#/definitions/pgtype.Bool'
      firebaseUid:
        $ref: '#/definitions/pgtype.Text'
      firstName:
        $ref: '#/definitions/pgtype.Text'
      lastName:
        $ref: '#/definitions/pgtype.Text'
      phoneNumber:
        $ref: '#/definitions/pgtype.Text'
      photoUrl:
        $ref: '#/definitions/pgtype.Text'
      updatedAt:
        $ref: '#/definitions/pgtype.Timestamptz'
      userID:
        type: string
    type: object
  pgtype.Bool:
    properties:
      bool:
        type: boolean
      valid:
        type: boolean
    type: object
  pgtype.InfinityModifier:
    enum:
    - 1
    - 0
    - -1
    type: integer
    x-enum-varnames:
    - Infinity
    - Finite
    - NegativeInfinity
  pgtype.Text:
    properties:
      string:
        type: string
      valid:
        type: boolean
    type: object
  pgtype.Timestamp:
    properties:
      infinityModifier:
        $ref: '#/definitions/pgtype.InfinityModifier'
      time:
        description: Time zone will be ignored when encoding to PostgreSQL.
        type: string
      valid:
        type: boolean
    type: object
  pgtype.Timestamptz:
    properties:
      infinityModifier:
        $ref: '#/definitions/pgtype.InfinityModifier'
      time:
        type: string
      valid:
        type: boolean
    type: object
  repo.CreateLivePayload:
    properties:
      description:
        type: string
      live_app_name:
        maxLength: 50
        minLength: 3
        type: string
      scheduled_end_time:
        type: string
      scheduled_start_time:
        type: string
      stream_name:
        maxLength: 50
        minLength: 3
        type: string
      title:
        maxLength: 50
        minLength: 3
        type: string
    type: object
  repo.CreateUserPayload:
    properties:
      first_name:
        maxLength: 25
        minLength: 3
        type: string
      last_name:
        maxLength: 25
        minLength: 3
        type: string
      phone_number:
        description: Assuming min 9 and max 15 digits for global phone numbers
        maxLength: 15
        minLength: 9
        type: string
      photo_url:
        type: string
    type: object
  repo.RequestError:
    properties:
      err:
        type: string
    type: object
  repo.VerifyResponse:
    properties:
      code:
        type: integer
      data:
        type: string
    type: object
info:
  contact: {}
paths:
  /users/{id}:
    get:
      description: Retrieve user details by ID
      operationId: get-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: <access_token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user
          schema:
            $ref: '#/definitions/db.User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/repo.RequestError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/repo.RequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/repo.RequestError'
      summary: Get a user by ID
  /webapi/live:
    post:
      consumes:
      - application/json
      description: Create a live entity with the given payload
      operationId: create-live
      parameters:
      - description: <access_token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: CreateLivePayload object
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/repo.CreateLivePayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created
          schema:
            $ref: '#/definitions/db.Live'
        "400":
          description: 'Bad request" ''{"error": "string"}'''
          schema:
            $ref: '#/definitions/repo.RequestError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/repo.RequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/repo.RequestError'
      summary: Create a live entity
  /webapi/live/{id}:
    get:
      description: Retrieve live details by ID
      operationId: get-live
      parameters:
      - description: Live ID
        in: path
        name: id
        required: true
        type: string
      - description: <access_token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved live
          schema:
            $ref: '#/definitions/db.Live'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/repo.RequestError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/repo.RequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/repo.RequestError'
      summary: Get a live by ID
  /webapi/users:
    post:
      consumes:
      - application/json
      description: Create a new user
      operationId: create-user
      parameters:
      - description: <access_token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: CreateUserPayload  object
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/repo.CreateUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created
          schema:
            $ref: '#/definitions/db.User'
        "400":
          description: 'Bad request" ''{"error": "string"}'''
          schema:
            $ref: '#/definitions/repo.RequestError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/repo.RequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/repo.RequestError'
      summary: Create a user
  /webapi/verify:
    post:
      consumes:
      - application/json
      description: Method to SRS callback to verify if a live can be streamed, update
        status
      operationId: srs-verify
      parameters:
      - description: Verify object
        in: body
        name: payload
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Authorized
          schema:
            $ref: '#/definitions/repo.VerifyResponse'
        "400":
          description: 'Bad request" ''{"error": "string"}'''
          schema:
            $ref: '#/definitions/repo.RequestError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/repo.RequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/repo.RequestError'
      summary: Verify if a live can be streamed
swagger: "2.0"
