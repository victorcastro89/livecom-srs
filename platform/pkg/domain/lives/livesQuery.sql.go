// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: livesQuery.sql

package lives

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLiveStream = `-- name: CreateLiveStream :one
INSERT INTO lives (userId, title, description, start_time, end_time)
VALUES ($1, $2, $3, $4, $5)
RETURNING streamid, userid, title, description, start_time, end_time, created_at, updated_at
`

type CreateLiveStreamParams struct {
	Userid      int32
	Title       string
	Description pgtype.Text
	StartTime   pgtype.Timestamptz
	EndTime     pgtype.Timestamptz
}

func (q *Queries) CreateLiveStream(ctx context.Context, arg CreateLiveStreamParams) (Life, error) {
	row := q.db.QueryRow(ctx, createLiveStream,
		arg.Userid,
		arg.Title,
		arg.Description,
		arg.StartTime,
		arg.EndTime,
	)
	var i Life
	err := row.Scan(
		&i.Streamid,
		&i.Userid,
		&i.Title,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLiveStreamById = `-- name: DeleteLiveStreamById :exec
DELETE FROM lives WHERE streamId = $1
`

func (q *Queries) DeleteLiveStreamById(ctx context.Context, streamid int32) error {
	_, err := q.db.Exec(ctx, deleteLiveStreamById, streamid)
	return err
}

const getLiveStreamById = `-- name: GetLiveStreamById :one
SELECT streamid, userid, title, description, start_time, end_time, created_at, updated_at FROM lives WHERE streamId = $1
`

func (q *Queries) GetLiveStreamById(ctx context.Context, streamid int32) (Life, error) {
	row := q.db.QueryRow(ctx, getLiveStreamById, streamid)
	var i Life
	err := row.Scan(
		&i.Streamid,
		&i.Userid,
		&i.Title,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listlivesByUserId = `-- name: ListlivesByUserId :many
SELECT streamid, userid, title, description, start_time, end_time, created_at, updated_at FROM lives WHERE userId = $1 ORDER BY start_time DESC
`

func (q *Queries) ListlivesByUserId(ctx context.Context, userid int32) ([]Life, error) {
	rows, err := q.db.Query(ctx, listlivesByUserId, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Life
	for rows.Next() {
		var i Life
		if err := rows.Scan(
			&i.Streamid,
			&i.Userid,
			&i.Title,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLiveStreamById = `-- name: UpdateLiveStreamById :exec
UPDATE lives
SET title = $2, description = $3, start_time = $4, end_time = $5, updated_at = current_timestamp
WHERE streamId = $1
`

type UpdateLiveStreamByIdParams struct {
	Streamid    int32
	Title       string
	Description pgtype.Text
	StartTime   pgtype.Timestamptz
	EndTime     pgtype.Timestamptz
}

func (q *Queries) UpdateLiveStreamById(ctx context.Context, arg UpdateLiveStreamByIdParams) error {
	_, err := q.db.Exec(ctx, updateLiveStreamById,
		arg.Streamid,
		arg.Title,
		arg.Description,
		arg.StartTime,
		arg.EndTime,
	)
	return err
}
