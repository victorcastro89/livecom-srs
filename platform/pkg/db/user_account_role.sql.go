// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user_account_role.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserAccountRoleRelation = `-- name: CreateUserAccountRoleRelation :one

INSERT INTO user_account_role (user_id, account_id, role)
VALUES ($1, $2, $3)
RETURNING user_id, account_id, role
`

type CreateUserAccountRoleRelationParams struct {
	UserID    pgtype.UUID
	AccountID pgtype.UUID
	Role      pgtype.Text
}

func (q *Queries) CreateUserAccountRoleRelation(ctx context.Context, arg CreateUserAccountRoleRelationParams) (UserAccountRole, error) {
	row := q.db.QueryRow(ctx, createUserAccountRoleRelation, arg.UserID, arg.AccountID, arg.Role)
	var i UserAccountRole
	err := row.Scan(&i.UserID, &i.AccountID, &i.Role)
	return i, err
}

const deleteUserAccountRoleRelation = `-- name: DeleteUserAccountRoleRelation :exec
DELETE FROM user_account_role
WHERE user_id = $1 AND account_id = $2
`

type DeleteUserAccountRoleRelationParams struct {
	UserID    pgtype.UUID
	AccountID pgtype.UUID
}

func (q *Queries) DeleteUserAccountRoleRelation(ctx context.Context, arg DeleteUserAccountRoleRelationParams) error {
	_, err := q.db.Exec(ctx, deleteUserAccountRoleRelation, arg.UserID, arg.AccountID)
	return err
}

const getUserAccountAndRoleRelation = `-- name: GetUserAccountAndRoleRelation :many
SELECT user_id, account_id, role
FROM user_account_role
WHERE user_id = $1
`

func (q *Queries) GetUserAccountAndRoleRelation(ctx context.Context, userID pgtype.UUID) ([]UserAccountRole, error) {
	rows, err := q.db.Query(ctx, getUserAccountAndRoleRelation, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAccountRole
	for rows.Next() {
		var i UserAccountRole
		if err := rows.Scan(&i.UserID, &i.AccountID, &i.Role); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAccountRoleRelation = `-- name: UpdateUserAccountRoleRelation :one
UPDATE user_account_role
SET role = $3
WHERE user_id = $1 AND account_id = $2
RETURNING user_id, account_id, role
`

type UpdateUserAccountRoleRelationParams struct {
	UserID    pgtype.UUID
	AccountID pgtype.UUID
	Role      pgtype.Text
}

func (q *Queries) UpdateUserAccountRoleRelation(ctx context.Context, arg UpdateUserAccountRoleRelationParams) (UserAccountRole, error) {
	row := q.db.QueryRow(ctx, updateUserAccountRoleRelation, arg.UserID, arg.AccountID, arg.Role)
	var i UserAccountRole
	err := row.Scan(&i.UserID, &i.AccountID, &i.Role)
	return i, err
}
