// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: livesQuery.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLive = `-- name: CreateLive :one
INSERT INTO lives (live_id, user_id, title, description, start_time, end_time, stream_url) 
VALUES ($1, $2, $3, $4, $5, $6, $7) 
RETURNING live_id, user_id, title, description, start_time, end_time, stream_url, created_at
`

type CreateLiveParams struct {
	LiveID      int32
	UserID      pgtype.UUID
	Title       string
	Description pgtype.Text
	StartTime   pgtype.Timestamp
	EndTime     pgtype.Timestamp
	StreamUrl   pgtype.Text
}

func (q *Queries) CreateLive(ctx context.Context, arg CreateLiveParams) (Life, error) {
	row := q.db.QueryRow(ctx, createLive,
		arg.LiveID,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.StartTime,
		arg.EndTime,
		arg.StreamUrl,
	)
	var i Life
	err := row.Scan(
		&i.LiveID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.StreamUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteLive = `-- name: DeleteLive :exec
DELETE FROM lives WHERE live_id = $1
`

func (q *Queries) DeleteLive(ctx context.Context, liveID int32) error {
	_, err := q.db.Exec(ctx, deleteLive, liveID)
	return err
}

const getLiveByID = `-- name: GetLiveByID :one
SELECT live_id, user_id, title, description, start_time, end_time, stream_url, created_at FROM lives WHERE live_id = $1
`

func (q *Queries) GetLiveByID(ctx context.Context, liveID int32) (Life, error) {
	row := q.db.QueryRow(ctx, getLiveByID, liveID)
	var i Life
	err := row.Scan(
		&i.LiveID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.StreamUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getLiveWithUserDetails = `-- name: GetLiveWithUserDetails :one
SELECT l.live_id, l.user_id, l.title, l.description, l.start_time, l.end_time, l.stream_url, l.created_at, u.first_name, u.last_name, u.email 
FROM lives l 
JOIN users u ON l.user_id = u.user_id 
WHERE l.live_id = $1
`

type GetLiveWithUserDetailsRow struct {
	LiveID      int32
	UserID      pgtype.UUID
	Title       string
	Description pgtype.Text
	StartTime   pgtype.Timestamp
	EndTime     pgtype.Timestamp
	StreamUrl   pgtype.Text
	CreatedAt   pgtype.Timestamp
	FirstName   pgtype.Text
	LastName    pgtype.Text
	Email       string
}

func (q *Queries) GetLiveWithUserDetails(ctx context.Context, liveID int32) (GetLiveWithUserDetailsRow, error) {
	row := q.db.QueryRow(ctx, getLiveWithUserDetails, liveID)
	var i GetLiveWithUserDetailsRow
	err := row.Scan(
		&i.LiveID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.StreamUrl,
		&i.CreatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const getLivesByUserID = `-- name: GetLivesByUserID :many
SELECT live_id, user_id, title, description, start_time, end_time, stream_url, created_at FROM lives WHERE user_id = $1 ORDER BY start_time DESC
`

func (q *Queries) GetLivesByUserID(ctx context.Context, userID pgtype.UUID) ([]Life, error) {
	rows, err := q.db.Query(ctx, getLivesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Life
	for rows.Next() {
		var i Life
		if err := rows.Scan(
			&i.LiveID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
			&i.StreamUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOngoingLives = `-- name: GetOngoingLives :many
SELECT live_id, user_id, title, description, start_time, end_time, stream_url, created_at FROM lives WHERE start_time <= CURRENT_TIMESTAMP AND (end_time IS NULL OR end_time > CURRENT_TIMESTAMP) ORDER BY start_time DESC
`

func (q *Queries) GetOngoingLives(ctx context.Context) ([]Life, error) {
	rows, err := q.db.Query(ctx, getOngoingLives)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Life
	for rows.Next() {
		var i Life
		if err := rows.Scan(
			&i.LiveID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
			&i.StreamUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLive = `-- name: UpdateLive :one
UPDATE lives 
SET user_id = $2, title = $3, description = $4, start_time = $5, end_time = $6, stream_url = $7 
WHERE live_id = $1 
RETURNING live_id, user_id, title, description, start_time, end_time, stream_url, created_at
`

type UpdateLiveParams struct {
	LiveID      int32
	UserID      pgtype.UUID
	Title       string
	Description pgtype.Text
	StartTime   pgtype.Timestamp
	EndTime     pgtype.Timestamp
	StreamUrl   pgtype.Text
}

func (q *Queries) UpdateLive(ctx context.Context, arg UpdateLiveParams) (Life, error) {
	row := q.db.QueryRow(ctx, updateLive,
		arg.LiveID,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.StartTime,
		arg.EndTime,
		arg.StreamUrl,
	)
	var i Life
	err := row.Scan(
		&i.LiveID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.StreamUrl,
		&i.CreatedAt,
	)
	return i, err
}
