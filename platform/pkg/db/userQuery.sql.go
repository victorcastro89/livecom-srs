// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: userQuery.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (user_id, email, email_verified ,firebase_uid, display_name, photo_url, first_name, last_name, phone_number) 
VALUES ($1, $2, $3, $4, $5 ,$6,$7,$8,$9) 
RETURNING user_id, firebase_uid, email, email_verified, first_name, last_name, display_name, photo_url, phone_number, created_at, updated_at
`

type CreateUserParams struct {
	UserID        pgtype.UUID
	Email         string
	EmailVerified pgtype.Bool
	FirebaseUid   pgtype.Text
	DisplayName   pgtype.Text
	PhotoUrl      pgtype.Text
	FirstName     pgtype.Text
	LastName      pgtype.Text
	PhoneNumber   pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserID,
		arg.Email,
		arg.EmailVerified,
		arg.FirebaseUid,
		arg.DisplayName,
		arg.PhotoUrl,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirebaseUid,
		&i.Email,
		&i.EmailVerified,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.PhotoUrl,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, firebase_uid, email, email_verified, first_name, last_name, display_name, photo_url, phone_number, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirebaseUid,
		&i.Email,
		&i.EmailVerified,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.PhotoUrl,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByFirebaseUID = `-- name: GetUserByFirebaseUID :one
SELECT user_id, firebase_uid, email, email_verified, first_name, last_name, display_name, photo_url, phone_number, created_at, updated_at FROM users WHERE firebase_uid = $1
`

func (q *Queries) GetUserByFirebaseUID(ctx context.Context, firebaseUid pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByFirebaseUID, firebaseUid)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirebaseUid,
		&i.Email,
		&i.EmailVerified,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.PhotoUrl,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, firebase_uid, email, email_verified, first_name, last_name, display_name, photo_url, phone_number, created_at, updated_at FROM users WHERE user_id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, userID pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirebaseUid,
		&i.Email,
		&i.EmailVerified,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.PhotoUrl,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserWithRoleAndAccountByFirebaseUID = `-- name: GetUserWithRoleAndAccountByFirebaseUID :one
SELECT
    u.user_id,
    u.firebase_uid,
    u.email,
    u.email_verified,
    u.first_name,
    u.last_name,
    u.display_name,
    u.photo_url,
    u.phone_number,
    u.created_at,
    u.updated_at,
    ua.role,
    a.account_id,
    a.account_name
FROM
    users u
JOIN
    user_account_role ua ON u.user_id = ua.user_id
JOIN
    account a ON ua.account_id = a.account_id
WHERE
    u.firebase_uid = $1
`

type GetUserWithRoleAndAccountByFirebaseUIDRow struct {
	UserID        pgtype.UUID
	FirebaseUid   pgtype.Text
	Email         string
	EmailVerified pgtype.Bool
	FirstName     pgtype.Text
	LastName      pgtype.Text
	DisplayName   pgtype.Text
	PhotoUrl      pgtype.Text
	PhoneNumber   pgtype.Text
	CreatedAt     pgtype.Timestamptz
	UpdatedAt     pgtype.Timestamptz
	Role          pgtype.Text
	AccountID     pgtype.UUID
	AccountName   pgtype.Text
}

func (q *Queries) GetUserWithRoleAndAccountByFirebaseUID(ctx context.Context, firebaseUid pgtype.Text) (GetUserWithRoleAndAccountByFirebaseUIDRow, error) {
	row := q.db.QueryRow(ctx, getUserWithRoleAndAccountByFirebaseUID, firebaseUid)
	var i GetUserWithRoleAndAccountByFirebaseUIDRow
	err := row.Scan(
		&i.UserID,
		&i.FirebaseUid,
		&i.Email,
		&i.EmailVerified,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.PhotoUrl,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Role,
		&i.AccountID,
		&i.AccountName,
	)
	return i, err
}

const getUserWithRoleAndAccountByID = `-- name: GetUserWithRoleAndAccountByID :one
SELECT
    u.user_id,
    u.firebase_uid,
    u.email,
    u.email_verified,
    u.first_name,
    u.last_name,
    u.display_name,
    u.photo_url,
    u.phone_number,
    ua.role,
    a.account_id,
    a.account_name
FROM
    users u
JOIN
    user_account_role ua ON u.user_id = ua.user_id
JOIN
    account a ON ua.account_id = a.account_id
WHERE
    u.user_id = $1
`

type GetUserWithRoleAndAccountByIDRow struct {
	UserID        pgtype.UUID
	FirebaseUid   pgtype.Text
	Email         string
	EmailVerified pgtype.Bool
	FirstName     pgtype.Text
	LastName      pgtype.Text
	DisplayName   pgtype.Text
	PhotoUrl      pgtype.Text
	PhoneNumber   pgtype.Text
	Role          pgtype.Text
	AccountID     pgtype.UUID
	AccountName   pgtype.Text
}

func (q *Queries) GetUserWithRoleAndAccountByID(ctx context.Context, userID pgtype.UUID) (GetUserWithRoleAndAccountByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserWithRoleAndAccountByID, userID)
	var i GetUserWithRoleAndAccountByIDRow
	err := row.Scan(
		&i.UserID,
		&i.FirebaseUid,
		&i.Email,
		&i.EmailVerified,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.PhotoUrl,
		&i.PhoneNumber,
		&i.Role,
		&i.AccountID,
		&i.AccountName,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET email = $2, first_name = $3, last_name = $4, display_name =$5,photo_url=$6, phone_number = $5, updated_at = current_timestamp 
WHERE user_id = $1 
RETURNING user_id, firebase_uid, email, email_verified, first_name, last_name, display_name, photo_url, phone_number, created_at, updated_at
`

type UpdateUserParams struct {
	UserID      pgtype.UUID
	Email       string
	FirstName   pgtype.Text
	LastName    pgtype.Text
	DisplayName pgtype.Text
	PhotoUrl    pgtype.Text
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.UserID,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.DisplayName,
		arg.PhotoUrl,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirebaseUid,
		&i.Email,
		&i.EmailVerified,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.PhotoUrl,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
