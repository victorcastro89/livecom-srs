// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: accounts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (account_id, account_name)
VALUES ($1, $2)
RETURNING account_id, account_name, created_at, updated_at
`

type CreateAccountParams struct {
	AccountID   pgtype.UUID
	AccountName pgtype.Text
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.AccountID, arg.AccountName)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.AccountName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM account WHERE account_id= $1
`

func (q *Queries) DeleteAccount(ctx context.Context, accountID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAccount, accountID)
	return err
}

const getAccountsAndRolesByUserID = `-- name: GetAccountsAndRolesByUserID :many
SELECT  uar.account_id, ac.account_name,uar.user_id, uar.role
FROM user_account_role uar
JOIN account ac ON uar.account_id = ac.account_id
WHERE uar.user_id = $1 
ORDER BY ac.created_at DESC
`

type GetAccountsAndRolesByUserIDRow struct {
	AccountID   pgtype.UUID
	AccountName pgtype.Text
	UserID      pgtype.UUID
	Role        pgtype.Text
}

func (q *Queries) GetAccountsAndRolesByUserID(ctx context.Context, userID pgtype.UUID) ([]GetAccountsAndRolesByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getAccountsAndRolesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAccountsAndRolesByUserIDRow
	for rows.Next() {
		var i GetAccountsAndRolesByUserIDRow
		if err := rows.Scan(
			&i.AccountID,
			&i.AccountName,
			&i.UserID,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
